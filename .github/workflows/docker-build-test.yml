name: Docker Build and Test

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-test:
    runs-on: apexalgo-iad-runners
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          load: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Create test environment file
        run: |
          cat > .env.test << EOF
          OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}
          NEWS_API_KEY=${{ secrets.NEWS_API_KEY }}
          ENVIRONMENT=test
          DATABASE_URL=sqlite:///data/test.db
          LOG_LEVEL=debug
          EOF

      - name: Run container for testing
        run: |
          docker run -d \
            --name news-trading-test \
            --env-file .env.test \
            -p 8000:8000 \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}

          # Wait for container to be healthy
          echo "Waiting for container to be ready..."
          timeout 60 bash -c 'until docker inspect --format="{{.State.Health.Status}}" news-trading-test | grep -q healthy; do sleep 2; done'

      - name: Run health check
        run: |
          echo "Testing health endpoint..."
          curl -f http://localhost:8000/health || exit 1

          echo "Testing root endpoint..."
          curl -f http://localhost:8000/ || exit 1

      - name: Run API tests
        run: |
          echo "Testing API endpoints..."

          # Test clustering endpoint (should return 200 or 400 with proper error)
          response=$(curl -s -o /dev/null -w "%{http_code}" \
            -X POST http://localhost:8000/api/cluster \
            -H "Content-Type: application/json" \
            -d '{"articles": []}')

          if [ "$response" -eq "200" ] || [ "$response" -eq "400" ] || [ "$response" -eq "422" ]; then
            echo "Cluster endpoint responding: $response"
          else
            echo "Unexpected response from cluster endpoint: $response"
            exit 1
          fi

      - name: Check container logs
        if: always()
        run: |
          echo "Container logs:"
          docker logs news-trading-test

      - name: Run security scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'

      - name: Upload Trivy results to GitHub Security
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Stop test container
        if: always()
        run: |
          docker stop news-trading-test || true
          docker rm news-trading-test || true

      - name: Push Docker image
        if: github.event_name != 'pull_request'
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Generate build summary
        if: always()
        run: |
          echo "## Docker Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Image**: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Tags**: ${{ steps.meta.outputs.tags }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Build Status**: ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Test Results" >> $GITHUB_STEP_SUMMARY
          echo "- Health Check: ✅" >> $GITHUB_STEP_SUMMARY
          echo "- API Endpoints: ✅" >> $GITHUB_STEP_SUMMARY
          echo "- Security Scan: ✅" >> $GITHUB_STEP_SUMMARY

  lint-and-format:
    runs-on: apexalgo-iad-runners

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install linting tools
        run: |
          pip install black flake8 isort mypy

      - name: Run Black
        run: |
          black --check backend/ || echo "Black formatting issues found"

      - name: Run Flake8
        run: |
          flake8 backend/ --max-line-length=100 || echo "Flake8 issues found"

      - name: Run isort
        run: |
          isort --check-only backend/ || echo "Import sorting issues found"

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install frontend dependencies
        run: |
          cd frontend
          npm ci

      - name: Run frontend linting
        run: |
          cd frontend
          npm run lint || echo "Frontend linting issues found"
