name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  # Backend linting and testing
  backend-test:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Cache Python dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        pip install -r backend/requirements.txt

    - name: Lint with flake8
      run: |
        flake8 backend/ --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 backend/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Run tests with pytest
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      run: |
        pytest backend/ -v --cov=backend --cov-report=xml --cov-report=term

    - name: Upload coverage
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: backend
        name: backend-coverage

  # Frontend linting and testing
  frontend-test:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install dependencies
      working-directory: frontend
      run: npm ci

    - name: Lint
      working-directory: frontend
      run: npm run lint

    - name: Run tests
      working-directory: frontend
      run: npm test -- --coverage

    - name: Build
      working-directory: frontend
      run: npm run build

  # Docker build and test
  docker-build:
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test]

    steps:
    - uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Build Docker image
      run: |
        docker build -t news-trading-ideas:test .

    - name: Test Docker image
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      run: |
        # Start container
        docker run -d --name test-container \
          -e OPENAI_API_KEY=$OPENAI_API_KEY \
          -e RSS_FEEDS="https://feeds.bloomberg.com/markets/news.rss" \
          -p 8000:8000 \
          news-trading-ideas:test

        # Wait for container to be healthy
        echo "Waiting for container to be healthy..."
        for i in {1..30}; do
          if docker inspect --format='{{.State.Health.Status}}' test-container | grep -q "healthy"; then
            echo "Container is healthy!"
            break
          fi
          echo "Waiting... ($i/30)"
          sleep 2
        done

        # Test health endpoint
        curl -f http://localhost:8000/health || exit 1

        # Show logs
        docker logs test-container

        # Cleanup
        docker stop test-container
        docker rm test-container

  # Deploy to production (main branch only)
  deploy:
    runs-on: ubuntu-latest
    needs: [docker-build]
    if: github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v3

    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/news-trading-ideas:latest
          ${{ secrets.DOCKER_USERNAME }}/news-trading-ideas:${{ github.sha }}
        cache-from: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/news-trading-ideas:buildcache
        cache-to: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/news-trading-ideas:buildcache,mode=max

    - name: Deploy notification
      run: |
        echo "Deployment successful! Image: ${{ secrets.DOCKER_USERNAME }}/news-trading-ideas:latest"
